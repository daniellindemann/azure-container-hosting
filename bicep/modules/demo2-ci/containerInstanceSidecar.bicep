import { managedIdentityReference } from '../../types/managedIdentityReference.bicep'

param location string
param tags object

param name string
param managedIdentity managedIdentityReference
param logAnalyticsWorkspaceName string
param acrLoginServer string
param containerImageMain string
param containerPortMain int
param containerImageSidecar string
param environmentVariables object = {}
param connectionStringSecretUri string

var environmentVariablesArray = [
  for item in items(environmentVariables): {
    name: item.key
    value: item.value
  }
]

resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2025-02-01' existing = {
  name: logAnalyticsWorkspaceName
}

resource containerInstance 'Microsoft.ContainerInstance/containerGroups@2024-10-01-preview' = {
  name: name
  location: location
  tags: tags
  identity: {
    type: 'UserAssigned'
    userAssignedIdentities: {
      '${managedIdentity.id}': {}
    }
  }
  properties: {
    osType: 'Linux'
    sku: 'Standard'
    restartPolicy: 'OnFailure'
    secretReferences: [
      {
        name: 'connectionString'
        identity: managedIdentity.id
        secretReferenceUri: connectionStringSecretUri
      }
    ]
    ipAddress: {
      type: 'Public'
      dnsNameLabel: name
      autoGeneratedDomainNameLabelScope: 'ResourceGroupReuse'
      ports: [
        {
          port: containerPortMain
          protocol: 'TCP'
        }
      ]
    }
    imageRegistryCredentials: [
      {
        server: acrLoginServer
        identity: managedIdentity.id
      }
    ]
    containers: [
      {
        name: 'main'
        properties: {
          image: containerImageMain
          ports: [
            {
              port: containerPortMain
              protocol: 'TCP'
            }
          ]
          environmentVariables: union([
            {
              name: 'ConnectionStrings__Beer'
              secureValueReference: 'connectionString'
            }
          ], environmentVariablesArray)          
          resources: {
            requests: {
              cpu: 1
              memoryInGB: 1
            }
          }
        }
      }
      {
        name: 'sidecar'
        properties: {
          image: containerImageSidecar
          resources: {
            requests: {
              cpu: json('0.5')
              memoryInGB: 1
            }
          }
        }
      }
    ]
    diagnostics: {
      logAnalytics: {
        logType: 'ContainerInstanceLogs'
        workspaceId: logAnalyticsWorkspace.properties.customerId
        workspaceKey: logAnalyticsWorkspace.listKeys().primarySharedKey
      }
    }
  }
}

output fqdn string = containerInstance.properties.ipAddress.fqdn
